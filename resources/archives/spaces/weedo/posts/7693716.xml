<item>
	<title>JavaScript et Ajax dans Symfony</title>
	<link>http://posterous.weedo.fr/javascript-et-ajax-dans-symfony</link>
	<pubDate>Fri Nov 20 03:30:46 -0800 2009</pubDate>
	
	<dc:creator><![CDATA[Ballut Vincent]]></dc:creator>
	
	

	<category><![CDATA[Uncategorized]]></category>

	<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

  <guid isPermaLink="false">http://posterous.weedo.fr/javascript-et-ajax-dans-symfony</guid>
	<description></description>
	<content:encoded><![CDATA[Symfony a prévu tout un tas de fonctions pour simplifier la mise en place de scripts JavaScript et Ajax. <p /><div class="CodeRay">
  <div class="code"><pre>Initaliser les bibliothèques JavaScript fournies avec Symfony (obligatoire avant d'utiliser les fonctions JavaScript de Symfony). &lt;?php use_helper('Javascript') ?&gt;Insèrer les balises JavaScript (&lt;script type=......&gt;&lt;/script&gt; &lt;?php echo javascript_tag(&quot;  function foobar() { ... }&quot;) ?&gt; Insérer un lien déclenchant une fonction JS :&lt;?php echo link_to_function('Click me!', &quot;alert('foobar')&quot;) ?&gt; Insérer un bouton déclenchant une fonction JS :&lt;?php echo button_to_function('Click me!', &quot;alert('foobar')&quot;) ?&gt; Changer le contenu d'un élément (équivalent de getElementById().InnerHTML)&lt;?php echo javascript_tag( update_element_function('id de l'élément', array( 'content' =&gt; &quot;&lt;strong&gt;Data processing complete&lt;/strong&gt;&quot;, (Option) 'position' =&gt; 'after', (Pour modifier lélément qui suit)  (Option) 'condition' =&gt; $condition ? 'remove' : 'empty', (Pour ne faire les modifs que sous certaines conditions) ))) ?&gt; Ajax !Remplacer le contenu d'un élément par les données renvoyées par le serveur :&lt;?php echo javascript_tag( remote_function(array( 'update' =&gt; 'myzone', 'url' =&gt; 'mymodule/myaction', ))) ?&gt;Cette fonction va mettre à jour l'élément ayant pour id &quot;myzone&quot; avec ce que renvoie le fichier mymodule/myclass Déclencher une fonction Ajax via un lien :&lt;div id=&quot;feedback&quot;&gt;&lt;/div&gt;&lt;?php echo link_to_remote('Delete this post', array( 'update' =&gt; 'feedback', 'url' =&gt; 'post/delete?id='.$post-&gt;getId(), )) ?&gt;Cette fonction va exécuter le code PHP de l'action post/delete et renvoyer le résultat dans l'élément ayant pour id &quot;feedback&quot;. Créer un formulaire préparé pour Ajax :&lt;?php echo form_remote_tag(array( 'update' =&gt; 'item_list', 'url' =&gt; 'item/add',)) ?&gt; Cette fonction va créer la balise &lt;form...&gt;. Lors de la validation du formulaire, les données seront envoyées par POST à l'action item/add, et la réponse sera indiquée dans l'élément ayant pour id &quot;item_list&quot;. Créer un bouton préparé pour Ajax :&lt;?php echo submit_to_remote('ajax_submit', 'Add in Ajax', array( 'update' =&gt; 'item_list', 'url' =&gt; '@item_add', )) ?&gt; Au lieu d'utiliser l'helper form_remote_tag, on peut aussi bien ne modifier que le bouton.Déclencher une fonction lors du changement d'un champ :&lt;?php echo observe_field('item', array( 'update' =&gt; 'item_suggestion', 'url' =&gt; '@item_being_typed', )) ?&gt;Cette fonction va observer le champ &quot;item&quot;, déclencher l'url spécifiée lors d'un changement, et retourner la réponse dans l'élément ayant pour id &quot;item_suggestion&quot;.</pre></div>
</div>]]></content:encoded>
	<excerpt:encoded><![CDATA[Symfony a prévu tout un tas de fonctions pour simplifier la mise en place de scripts JavaScript et Ajax. Initaliser les bibliothèques JavaScript fournies avec Symfony (obligatoire avant d'utiliser les fonctions JavaScript de Symfony). Insèrer l...]]></excerpt:encoded>	

	<wp:post_date>Fri Nov 20 03:30:46 -0800 2009</wp:post_date>
	<wp:post_date_gmt>%= display_date %></wp:post_date_gmt>
	<wp:comment_status>open</wp:comment_status>
	<wp:ping_status>open</wp:ping_status>
	<wp:post_name>javascript-et-ajax-dans-symfony</wp:post_name>
	<wp:status>publish</wp:status>
	<wp:post_parent>0</wp:post_parent>
	<wp:menu_order>0</wp:menu_order>
	<wp:post_type>post</wp:post_type>
	<wp:post_password></wp:post_password>
	<wp:is_sticky>0</wp:is_sticky>

	
</item>
