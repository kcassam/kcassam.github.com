<item>
	<title>RÃ©soudre l'incompatibilitÃ© entre l'autoload symfony et les fichiers de backup</title>
	<link>http://posterous.weedo.fr/resoudre-lincompatibilite-entre-lautoload-sym</link>
	<pubDate>Wed May 19 08:43:00 -0700 2010</pubDate>
	
	<dc:creator><![CDATA[Karim Cassam ChenaÃ¯]]></dc:creator>
	
	

	<category><![CDATA[Uncategorized]]></category>

	<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

  <guid isPermaLink="false">http://posterous.weedo.fr/resoudre-lincompatibilite-entre-lautoload-sym</guid>
	<description></description>
	<content:encoded><![CDATA[<p>Si vous laissez un fichier de backup avec l'extension .php dans symfony, il risque d'Ãªtre chargÃ© Ã  tort pas l'autoload symfony !<br />Les fichiers de backup ne doivent pas se terminer par .php mais, par exemple, par php.backup<br />exemple valide : nomdufichier-2010-05-19-135629-kcc.php.backup et non nomdufichier-2010-05-19-135629-kcc.php</p>
<p>En parallÃ¨le, rajouter l'instruction suivant dans les fichiers .htaccess, pour Ã©viter que ces fichiers de backup soient accessibles depuis l'extÃ©rieur :</p>
<p><code>&lt;FilesMatch "\.backup$"&gt;
Order Allow,Deny
Deny from all
&lt;/FilesMatch&gt;</code></p>
<p>En effet, dans certaines configurations, ces fichiers .backup pourraient apparaitre comme du texte, donnant ainsi accÃ¨s Ã  votre code source dans le meilleur des cas et aux login/mots de passe de vos bdd dans le pire...</p>
<p>ref autoload symfony : <a href="http://www.symfony-project.org/book/1_2/19-Mastering-Symfony-s-Configuration-Files#chapter_19_extending_the_autoloading_feature">http://www.symfony-project.org/book/1_2/19-Mastering-Symfony-s-Configuration-...</a><br />ref htaccessÂ FilesMatchÂ : <a href="http://www.askapache.com/htaccess/using-filesmatch-and-files-in-htaccess.html">http://www.askapache.com/htaccess/using-filesmatch-and-files-in-htaccess.html</a></p>
<div>Â </div>]]></content:encoded>
	<excerpt:encoded><![CDATA[Si vous laissez un fichier de backup avec l'extension .php dans symfony, il risque d'Ãªtre chargÃ© Ã  tort pas l'autoload symfony !Les fichiers de backup ne doivent pas se terminer par .php mais, par exemple, par php.backupexemple valide : nomdufi...]]></excerpt:encoded>	

	<wp:post_date>Wed May 19 08:43:00 -0700 2010</wp:post_date>
	<wp:post_date_gmt>%= display_date %></wp:post_date_gmt>
	<wp:comment_status>open</wp:comment_status>
	<wp:ping_status>open</wp:ping_status>
	<wp:post_name>resoudre-lincompatibilite-entre-lautoload-sym</wp:post_name>
	<wp:status>publish</wp:status>
	<wp:post_parent>0</wp:post_parent>
	<wp:menu_order>0</wp:menu_order>
	<wp:post_type>post</wp:post_type>
	<wp:post_password></wp:post_password>
	<wp:is_sticky>0</wp:is_sticky>

	
		<wp:comment>
			<!-- <wp:comment_id>5</wp:comment_id> -->
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_date>Thu Jan 06 04:06:51 -0800 2011</wp:comment_date>
			<wp:comment_date_gmt>Thu Jan 06 04:06:51 -0800 2011</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[2 autres solutions pour Ã©viter qu'un fichier dont l'extension n'est pas php puisse apparaitre en clair : 
- Placer ce fichier en dehors de www
- Ajouter .php aprÃ¨s l'extension du fichier. Par exemple, options.ini devient options.ini.php ou bdd.yaml devient bdd.yaml.php.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
		</wp:comment>
	
</item>
