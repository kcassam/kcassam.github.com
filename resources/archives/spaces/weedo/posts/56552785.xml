<item>
	<title>A simpler email address validator for Zend</title>
	<link>http://posterous.weedo.fr/a-simpler-email-address-validator-for-zend</link>
	<pubDate>Thu Jun 09 09:40:00 -0700 2011</pubDate>
	
	<dc:creator><![CDATA[Karim Cassam ChenaÃ¯]]></dc:creator>
	
	

	<category><![CDATA[Uncategorized]]></category>

	<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

  <guid isPermaLink="false">http://posterous.weedo.fr/a-simpler-email-address-validator-for-zend</guid>
	<description></description>
	<content:encoded><![CDATA[<p>I wrote a simpler email validator for Zend. Here it is :</p>

<div class="CodeRay">
  <div class="code"><pre><span class="keyword">namespace</span> <span class="constant">Weedo</span>\<span class="constant">Validate</span>;

<span class="comment">/**
 * Weedo EmailAddress Validator class.
 *
 * @author http://twitter.com/kaweedo
 */</span>

<span class="keyword">class</span> <span class="class">EmailAddress</span> <span class="keyword">extends</span> \<span class="constant">Zend_Validate_Abstract</span>
{
    <span class="keyword">const</span> <span class="constant">INVALID</span> = <span class="string"><span class="delimiter">'</span><span class="content">emailAddressInvalid</span><span class="delimiter">'</span></span>;

    <span class="keyword">protected</span> <span class="local-variable">$_messageTemplates</span> = <span class="predefined">array</span>(
        <span class="predefined-constant">self</span>::<span class="constant">INVALID</span> =&gt; <span class="string"><span class="delimiter">&quot;</span><span class="content">Email is not valid</span><span class="delimiter">&quot;</span></span>
    );

     <span class="comment">/**
     * isValid function.
     * Defined by Zend_Validate_Interface
     *
     * Returns true if and only if $value is a valid email address
     * according to RFC2822
     *
     * @access public
     * @link   http://php.net/manual/en/function.filter-var.php
     * @param  string $value
     * @return boolean
     */</span>

    <span class="keyword">public</span> <span class="keyword">function</span> <span class="function">isValid</span>(<span class="local-variable">$value</span>)
    {
        <span class="keyword">if</span>(filter_var(<span class="local-variable">$value</span>, <span class="constant">FILTER_VALIDATE_EMAIL</span>) === <span class="predefined-constant">false</span>) {
            <span class="local-variable">$this</span>-&gt;_error(<span class="predefined-constant">self</span>::<span class="constant">INVALID</span>);
            <span class="keyword">return</span> <span class="predefined-constant">false</span>;
        } <span class="keyword">else</span> {
            <span class="comment">// We only check the presence of a dot on the domain part</span>
            <span class="local-variable">$components</span> = <span class="predefined">explode</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">@</span><span class="delimiter">&quot;</span></span>, <span class="local-variable">$value</span>);
            <span class="local-variable">$domain</span> = <span class="local-variable">$components</span>[<span class="integer">1</span>];

            <span class="keyword">if</span> (<span class="predefined">strpos</span>(<span class="local-variable">$domain</span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">.</span><span class="delimiter">&quot;</span></span>) === <span class="predefined-constant">false</span>) {
                <span class="local-variable">$this</span>-&gt;_error(<span class="predefined-constant">self</span>::<span class="constant">INVALID</span>);
                <span class="keyword">return</span> <span class="predefined-constant">false</span>;
            }

            <span class="keyword">return</span> <span class="predefined-constant">true</span>;
        }
    }
}</pre></div>
</div>


<p>Usage example :</p>

<div class="CodeRay">
  <div class="code"><pre><span class="local-variable">$emailAddressValidator</span> = <span class="keyword">new</span> <span class="constant">Weedo</span>\<span class="constant">Validate</span>\<span class="constant">EmailAddress</span>();
<span class="comment">/* $emailAddressValidator = new Zend_Validate_EmailAddress(); too complicated */</span>

<span class="local-variable">$this</span>-&gt;addElement(
        <span class="string"><span class="delimiter">'</span><span class="content">text</span><span class="delimiter">'</span></span>,
        <span class="string"><span class="delimiter">'</span><span class="content">email</span><span class="delimiter">'</span></span>,
        <span class="predefined">array</span>(
            <span class="string"><span class="delimiter">'</span><span class="content">placeholder</span><span class="delimiter">'</span></span>     =&gt; <span class="predefined">ucfirst</span>(<span class="local-variable">$this</span>-&gt;getTranslator()-&gt;translate(<span class="string"><span class="delimiter">'</span><span class="content">Your email</span><span class="delimiter">'</span></span>)).<span class="string"><span class="delimiter">&quot;</span><span class="content">*</span><span class="delimiter">&quot;</span></span>,
            <span class="string"><span class="delimiter">'</span><span class="content">required</span><span class="delimiter">'</span></span>  =&gt; <span class="predefined-constant">true</span>,
            <span class="string"><span class="delimiter">'</span><span class="content">validators</span><span class="delimiter">'</span></span> =&gt; 
            <span class="predefined">array</span>(
                <span class="predefined">array</span>(<span class="string"><span class="delimiter">'</span><span class="content">NotEmpty</span><span class="delimiter">'</span></span>, <span class="predefined-constant">true</span>, <span class="predefined">array</span>(<span class="string"><span class="delimiter">'</span><span class="content">messages</span><span class="delimiter">'</span></span> =&gt; <span class="local-variable">$this</span>-&gt;getTranslator()-&gt;translate(<span class="string"><span class="delimiter">'</span><span class="content">Email is mandatory</span><span class="delimiter">'</span></span>))),
                <span class="predefined">array</span>(<span class="local-variable">$emailAddressValidator</span>,<span class="predefined-constant">true</span>),
            ),
        )
    );</pre></div>
</div>


<p>source :
<a href="http://www.electrictoolbox.com/php-email-validation-filter-var/">http://www.electrictoolbox.com/php-email-validation-filter-var/</a><br />
<a href="http://php.net/manual/en/function.filter-var.php">http://php.net/manual/en/function.filter-var.php</a></p>]]></content:encoded>
	<excerpt:encoded><![CDATA[I wrote a simpler email validator for Zend. Here it is : namespace Weedo\Validate; /** * Weedo EmailAddress Validator class. * * @author http://twitter.com/kaweedo */ class EmailAddress extends \Zend_Validate_Abstract { const INVALID = 'emailAddre...]]></excerpt:encoded>	

	<wp:post_date>Thu Jun 09 09:40:00 -0700 2011</wp:post_date>
	<wp:post_date_gmt>%= display_date %></wp:post_date_gmt>
	<wp:comment_status>open</wp:comment_status>
	<wp:ping_status>open</wp:ping_status>
	<wp:post_name>a-simpler-email-address-validator-for-zend</wp:post_name>
	<wp:status>publish</wp:status>
	<wp:post_parent>0</wp:post_parent>
	<wp:menu_order>0</wp:menu_order>
	<wp:post_type>post</wp:post_type>
	<wp:post_password></wp:post_password>
	<wp:is_sticky>0</wp:is_sticky>

	
</item>
